{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"functions/utils/","title":"Utility Functions Documentation","text":"<p>This documentation provides an overview of the utility functions included in the provided code.</p>"},{"location":"functions/utils/#scrapepagetabs-contenttypes","title":"scrapePage(tabs, contentTypes)","text":"<p>This function scrapes a web page and extracts specific elements based on the provided <code>contentTypes</code>.</p> <ul> <li><code>tabs</code>: An array of tabs representing the current browsing session.</li> <li><code>contentTypes</code>: A string selector for the types of elements to be extracted.</li> </ul> <p>The function retrieves the HTML content of the current tab's URL, parses it using the DOMParser, and searches for elements that match the given <code>contentTypes</code>. It looks for elements with either a <code>title</code> attribute or an <code>alt</code> attribute and stores them in an array. If no such elements are found, it selects the first element from the matched elements. The function logs the text content or source URL of the selected element and returns it.</p>"},{"location":"functions/utils/#detecthighlightedtexttextarea","title":"detectHighlightedText(textarea)","text":"<p>This function detects the highlighted text within a textarea element.</p> <ul> <li><code>textarea</code>: The textarea element from which to extract the highlighted text.</li> </ul> <p>The function retrieves the selected text from the <code>textarea</code> by using the <code>selectionStart</code> and <code>selectionEnd</code> properties of its value. It returns the selected text.</p>"},{"location":"functions/utils/#displaytexttext-x-y","title":"displayText(text, x, y)","text":"<p>This function displays a tooltip or modal with the given text.</p> <ul> <li><code>text</code>: The text to be displayed in the tooltip.</li> <li><code>x</code> (optional): The X-coordinate position of the tooltip. If not provided, it defaults to the center of the page.</li> <li><code>y</code> (optional): The Y-coordinate position of the tooltip. If not provided, it defaults to the center of the page.</li> </ul> <p>The function creates a tooltip element, sets its position, styling, and content based on the input parameters, and appends it to the document body. It also adds an event listener to remove the tooltip when clicking anywhere on the document.</p>"},{"location":"functions/utils/#displayloadingx-y","title":"displayLoading(x, y)","text":"<p>This function displays a loading indicator.</p> <ul> <li><code>x</code> (optional): The X-coordinate position of the loading indicator. If not provided, it defaults to the center of the page.</li> <li><code>y</code> (optional): The Y-coordinate position of the loading indicator. If not provided, it defaults to the center of the page.</li> </ul> <p>The function creates a loading indicator element, sets its position, styling, and content, and appends it to the document body. It removes any existing loading indicators before displaying a new one.</p>"},{"location":"functions/utils/#hidetooltip","title":"hideTooltip()","text":"<p>This function hides or removes the currently displayed tooltip or loading indicator.</p> <p>The function selects the tooltip and loading indicator elements using CSS class selectors and removes them from the document if found.</p>"},{"location":"functions/utils/#collectbrowsinghistoryday","title":"collectBrowsingHistoryDay()","text":"<p>This function collects the browsing history for the past 24 hours.</p> <p>The function uses the <code>chrome.history.search</code> API to search for history items within the specified time range. It returns a Promise that resolves to an array of history objects.</p>"},{"location":"functions/utils/#collectbrowsinghistoryweek","title":"collectBrowsingHistoryWeek()","text":"<p>This function collects the browsing history for the past week.</p> <p>The function uses the <code>chrome.history.search</code> API to search for history items within the specified time range. It returns a Promise that resolves to an array of history objects.</p>"},{"location":"functions/utils/#collectbrowsinghistorymonth","title":"collectBrowsingHistoryMonth()","text":"<p>This function collects the browsing history for the past month.</p> <p>The function uses the <code>chrome.history.search</code> API to search for history items within the specified time range. It returns a Promise that resolves to an array of history objects.</p>"},{"location":"functions/utils/#collectbrowsinghistoryyear","title":"collectBrowsingHistoryYear()","text":"<p>This function collects the browsing history for the past year.</p> <p>The function uses the <code>chrome.history.search</code> API to search for history items within the specified time range. It returns a Promise that resolves to an array of history objects.</p> <p>Note: The <code>collectBrowsingHistoryDay()</code>, <code>collectBrowsingHistoryWeek()</code>, <code>collectBrowsingHistoryMonth()</code>, and <code>collectBrowsingHistoryYear()</code> functions are specific to the Google Chrome browser extension environment and rely on the <code>chrome.history.search</code> API.</p>"},{"location":"plugins/chatbot/","title":"ChatBotPlugin","text":"<p>The <code>ChatBotPlugin</code> is a class that interacts with the OpenAI API to create a chatbot. This chatbot can be asked questions and it responds based on a defined personality and context. </p>"},{"location":"plugins/chatbot/#constructor","title":"Constructor","text":"<p>The constructor takes several parameters:</p> <ul> <li><code>apiKey</code>: The API key for the OpenAI service.</li> <li><code>conversationContext</code>: Initial context for the chat session.</li> <li><code>history</code>: Initial conversation history.</li> <li><code>maxHistory</code>: Maximum number of messages to store in the chat history.</li> <li><code>maxMessageLength</code>: Maximum length of a chat message.</li> <li><code>personality</code>: Personality for the chatbot.</li> </ul> <p>If some of these parameters are not provided, the constructor will set default values.</p>"},{"location":"plugins/chatbot/#methods","title":"Methods","text":""},{"location":"plugins/chatbot/#askquestionuserquestion","title":"askQuestion(userQuestion)","text":"<p>Takes a user's question as an argument and adds it to the conversation history. It then asks the question to the OpenAI API and adds the chatbot's response to the history.</p>"},{"location":"plugins/chatbot/#initializesession","title":"initializeSession()","text":"<p>Initializes the chat session by sending a system message to the OpenAI API with the conversation context and personality.</p>"},{"location":"plugins/chatbot/#addmessagetohistoryrole-message","title":"addMessageToHistory(role, message)","text":"<p>Adds a message to the conversation history. The role and message are parameters that need to be passed to this method.</p>"},{"location":"plugins/chatbot/#refreshcontext","title":"refreshContext()","text":"<p>This method should be used to update the context when the conversation history becomes too large.</p>"},{"location":"plugins/chatbot/#processmessagemessage","title":"processMessage(message)","text":"<p>Processes a message and if its length is greater than the defined maximum, it is summarized before being added to the history.</p>"},{"location":"plugins/chatbot/#setpersonalitypersonality-setcontextcontext-setmaxhistorymaxhistory-setmaxmessagelengthmaxmessagelength","title":"setPersonality(personality), setContext(context), setMaxHistory(maxHistory), setMaxMessageLength(maxMessageLength)","text":"<p>Setter methods for setting the personality, context, maximum history, and maximum message length.</p>"},{"location":"plugins/chatbot/#getpersonality-getcontext-gethistory","title":"getPersonality(), getContext(), getHistory()","text":"<p>Getter methods for getting the current personality, context, and conversation history.</p>"},{"location":"plugins/chatbot/#clearhistory","title":"clearHistory()","text":"<p>Clears the conversation history.</p>"},{"location":"plugins/chatbot/#usage","title":"Usage","text":"<pre><code>const chatBotPlugin = new chatBotPlugin(apiKey, conversationContext, history, maxHistory, maxMessageLength, personality);\nchatBotPlugin.askQuestion(\"What's the weather today?\");\n</code></pre> <p>This will initialize a new instance of ChatBotPlugin and ask it a question. Be sure to replace the constructor parameters with your actual value</p>"},{"location":"plugins/openAiPlugins/","title":"OpenAIPlugin","text":"<p>The <code>OpenAIPlugin</code> class is part of an npm package designed to assist developers in creating intelligent web extensions rapidly and efficiently. This class allows interaction with the OpenAI API to perform various tasks such as summarizing text, recommending URLs, or enabling chat conversations with the AI.</p>"},{"location":"plugins/openAiPlugins/#constructor","title":"Constructor","text":"<p>The constructor for <code>OpenAIPlugin</code> requires an API key for the OpenAI service.</p>"},{"location":"plugins/openAiPlugins/#constructorapikey","title":"constructor(apiKey)","text":""},{"location":"plugins/openAiPlugins/#properties","title":"Properties","text":"<ul> <li><code>apiKey</code>: The API key used to authenticate with the OpenAI service.</li> <li><code>apiEndpoint</code>: The endpoint for accessing the OpenAI API's completions.</li> <li><code>apiChatEndpoint</code>: The endpoint for accessing the OpenAI API's chat completions.</li> <li><code>apiEditEndpoint</code>: The endpoint for making edits through the OpenAI API.</li> <li><code>configuration</code>: Configuration object for the OpenAI API.</li> <li><code>openai</code>: Instance of OpenAIApi.</li> </ul>"},{"location":"plugins/openAiPlugins/#methods","title":"Methods","text":""},{"location":"plugins/openAiPlugins/#summarizetexttext","title":"<code>summarizeText(text)</code>","text":"<p>This method takes a text string and uses the OpenAI API to generate a summary of the text.</p>"},{"location":"plugins/openAiPlugins/#async-summarizetexttext","title":"async summarizeText(text)","text":""},{"location":"plugins/openAiPlugins/#getavailablemodels","title":"<code>getAvailableModels()</code>","text":"<p>This method fetches the list of available models from the OpenAI API.</p>"},{"location":"plugins/openAiPlugins/#async-getavailablemodels","title":"async getAvailableModels()","text":""},{"location":"plugins/openAiPlugins/#recommendurlsurls-numurls","title":"<code>recommendUrls(urls, numUrls)</code>","text":"<p>Given a list of URLs, this method recommends a certain number of new websites to visit based on the input URLs.</p>"},{"location":"plugins/openAiPlugins/#async-recommendurlsurls-numurls","title":"async recommendUrls(urls, numUrls)","text":""},{"location":"plugins/openAiPlugins/#custompromptuserprompt-data","title":"<code>customPrompt(userPrompt, data)</code>","text":"<p>This method allows for a custom prompt completion. It takes a user prompt and data string, and uses them to generate a response.</p>"},{"location":"plugins/openAiPlugins/#async-custompromptuserprompt-data","title":"async customPrompt(userPrompt, data)","text":""},{"location":"plugins/openAiPlugins/#chatquery","title":"<code>chat(query)</code>","text":"<p>This method takes a chat query and uses it to generate a chat conversation with the AI.</p>"},{"location":"plugins/openAiPlugins/#async-chatquery","title":"async chat(query)","text":""},{"location":"plugins/openAiPlugins/#example","title":"Example","text":"<p>let plugin = new OpenAIPlugin(''); plugin.summarizeText('The quick brown fox jumps over the lazy dog.'); <p>The above code initializes a new instance of <code>OpenAIPlugin</code> with your API key, then uses the instance to summarize a given text.</p>"},{"location":"plugins/openAiPlugins/#note","title":"Note","text":"<p>When using any of the methods in this class, handle returned promises appropriately to catch any errors that may occur during the API calls.</p> <p>Ensure you have the correct OpenAI API key and that you handle and secure it appropriately.</p> <p>Remember to replace  with your actual OpenAI API key when using the example."},{"location":"plugins/openAiPlugins/plugin%20builder/","title":"aiPrompts","text":"<p><code>aiPrompts</code> is an array of objects, each representing a unique AI prompt that can be used by the custom plugin. Each object has the following properties:</p> <ul> <li><code>id</code>: A unique identifier for the AI prompt.</li> <li><code>name</code>: The name of the AI prompt.</li> <li><code>type</code>: The type of the prompt. In this case, it's 'aiPrompt'.</li> <li><code>description</code>: A brief description of what the AI prompt does.</li> <li><code>text</code>: The actual prompt that will be used.</li> </ul>"},{"location":"plugins/openAiPlugins/plugin%20builder/#datasources","title":"dataSources","text":"<p><code>dataSources</code> is an array of objects, each representing a unique data source that the plugin can use. Each object has the following properties:</p> <ul> <li><code>id</code>: A unique identifier for the data source.</li> <li><code>name</code>: The name of the data source.</li> <li><code>type</code>: The type of the source. In this case, it's 'dataSource'.</li> <li><code>description</code>: A brief description of what the data source does.</li> <li><code>execute</code>: An asynchronous function that will be called when the user clicks on the data source. This function should handle any necessary data retrieval.</li> </ul>"},{"location":"plugins/openAiPlugins/plugin%20builder/#displaymethods","title":"displayMethods","text":"<p><code>displayMethods</code> is an array of objects, each representing a unique method for displaying the results of an AI prompt. Each object has the following properties:</p> <ul> <li><code>id</code>: A unique identifier for the display method.</li> <li><code>name</code>: The name of the display method.</li> <li><code>type</code>: The type of the method. In this case, it's 'displayMethod'.</li> <li><code>description</code>: A brief description of what the display method does.</li> <li><code>execute</code>: A function that will be called when the user clicks on the display method. This function should handle any necessary data display.</li> </ul> <p>These templates form the basic structure for creating custom plugins within the demo. By defining more <code>aiPrompts</code>, <code>dataSources</code>, and <code>displayMethods</code>, you can greatly extend the functionality of the custom plugin.</p>"},{"location":"plugins/openAiPlugins/plugin%20builder/plugin%20builder%20modules/","title":"aiPrompts","text":"<p><code>aiPrompts</code> is an array of objects, each representing a unique AI prompt that can be used by the custom plugin. Each object has the following properties:</p> <ul> <li><code>id</code>: A unique identifier for the AI prompt.</li> <li><code>name</code>: The name of the AI prompt.</li> <li><code>type</code>: The type of the prompt. In this case, it's 'aiPrompt'.</li> <li><code>description</code>: A brief description of what the AI prompt does.</li> <li><code>text</code>: The actual prompt that will be used.</li> </ul>"},{"location":"plugins/openAiPlugins/plugin%20builder/plugin%20builder%20modules/#datasources","title":"dataSources","text":"<p><code>dataSources</code> is an array of objects, each representing a unique data source that the plugin can use. Each object has the following properties:</p> <ul> <li><code>id</code>: A unique identifier for the data source.</li> <li><code>name</code>: The name of the data source.</li> <li><code>type</code>: The type of the source. In this case, it's 'dataSource'.</li> <li><code>description</code>: A brief description of what the data source does.</li> <li><code>execute</code>: An asynchronous function that will be called when the user clicks on the data source. This function should handle any necessary data retrieval.</li> </ul>"},{"location":"plugins/openAiPlugins/plugin%20builder/plugin%20builder%20modules/#displaymethods","title":"displayMethods","text":"<p><code>displayMethods</code> is an array of objects, each representing a unique method for displaying the results of an AI prompt. Each object has the following properties:</p> <ul> <li><code>id</code>: A unique identifier for the display method.</li> <li><code>name</code>: The name of the display method.</li> <li><code>type</code>: The type of the method. In this case, it's 'displayMethod'.</li> <li><code>description</code>: A brief description of what the display method does.</li> <li><code>execute</code>: A function that will be called when the user clicks on the display method. This function should handle any necessary data display.</li> </ul> <p>These templates form the basic structure for creating custom plugins within the demo. By defining more <code>aiPrompts</code>, <code>dataSources</code>, and <code>displayMethods</code>, you can greatly extend the functionality of the custom plugin.</p>"},{"location":"plugins/recommender/","title":"UrlRecommenderPlugin","text":"<p>The <code>UrlRecommenderPlugin</code> is a class that interacts with the OpenAI API to recommend URLs based on the user's browsing history. </p>"},{"location":"plugins/recommender/#constructor","title":"Constructor","text":"<p>The constructor for <code>UrlRecommenderPlugin</code> takes an API key for the OpenAI service.</p> <pre><code>constructor(apiKey)\n</code></pre>"},{"location":"plugins/recommender/#methods","title":"Methods","text":"<pre><code>recommendUrlsMonth()\n</code></pre> <p>This method collects the user's browsing history from the past month, and sends it to the OpenAI API to get URL recommendations. The recommended URLs are then returned.</p>"},{"location":"plugins/recommender/#usage","title":"Usage","text":"<pre><code>const urlRecommenderPlugin = new urlRecommenderPlugin(apiKey);\nurlRecommenderPlugin.recommendUrlsMonth();\n</code></pre> <p>This will initialize a new instance of <code>UrlRecommenderPlugin</code> and recommend URLs based on the user's browsing history for the past month. Be sure to replace the apiKey in the constructor with your actual OpenAI API key.</p>"},{"location":"plugins/recommender/#note","title":"Note","text":"<p>When using the <code>recommendUrlsMonth</code> method, handle the returned promise appropriately to catch any errors that may occur during the API call.</p> <p>Ensure you have the correct OpenAI API key and that you handle and secure it appropriately.</p>"},{"location":"plugins/summarizer/","title":"SummarizerPlugin","text":"<p>The <code>SummarizerPlugin</code> is a class that interacts with the OpenAI API to provide a summary of any selected text on a webpage.</p>"},{"location":"plugins/summarizer/#constructor","title":"Constructor","text":"<p>The constructor for <code>SummarizerPlugin</code> requires an API key for the OpenAI service.</p> <pre><code>constructor(apiKey)\n</code></pre>"},{"location":"plugins/summarizer/#methods","title":"Methods","text":""},{"location":"plugins/summarizer/#attach","title":"attach()","text":"<p>This method attaches an event listener to the document that listens for <code>mouseup</code> events. When such an event is detected, it checks if any text is selected. If there is, it calls the OpenAI API to generate a summary of the selected text, and then displays that summary in a tooltip near the selected text.</p>"},{"location":"plugins/summarizer/#usage","title":"Usage","text":"<pre><code>const summarizerPlugin = new SummarizerPlugin(apiKey);\nsummarizerPlugin.attach();\n</code></pre> <p>This will initialize a new instance of <code>SummarizerPlugin</code> and attach the event listener. Any selected text will then be summarized and displayed in a tooltip. Be sure to replace the apiKey in the constructor with your actual OpenAI API key.</p>"},{"location":"plugins/summarizer/#note","title":"Note","text":"<p>When using the <code>attach</code> method, handle the returned promise appropriately to catch any errors that may occur during the API call.</p> <p>Ensure you have the correct OpenAI API key and that you handle and secure it appropriately.</p>"}]}