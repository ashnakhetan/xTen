{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to xTen!","text":""},{"location":"#steps","title":"Steps","text":"<pre><code>1. Run `pnpm install` in the plasmo project.\n2. Run `pnpm dev` in the plasmo project.\n3. Add the build folder as you would add any extension in chrome (we're literally only adding the extension here!)\n</code></pre> <p>If you look into the console of the extension you should see the test message show up!</p>"},{"location":"#later-steps","title":"Later steps","text":"<p>As we start adding packages to @xten, we're going to start getting our own dependencies so we will have to run <code>pnpm install</code> in that folder as well but for now we have nothing.</p>"},{"location":"#openai-notice","title":"OpenAI notice","text":"<p>Code added is server side so make sure to never ship any openai configs with it \u2013 devs would likely want to have a way for users to input their own key in and use that.</p>"},{"location":"outline/","title":"Software outline","text":""},{"location":"problem/","title":"Problem description and design criteria","text":"<pre><code>1. iOS Trends to follow: Sideloading\n2. How to leverage sideloading to increase browser extension discoverability\n3. Payments for these apps\n4. Security\n5. Take advantage of the competition period\n6. Apple in iOS 17 could allow third-party browsers to [use their own engines](https://www.macrumors.com/2022/12/14/apple-considering-non-webkit-iphone-browsers/) by eliminating the WebKit requirement\n</code></pre> <p>BROWSER EXTENSIONS IN THE DYNAMIC ISLAND</p> <p>Interactive Widgets \u201cRecommend an app for me\u201d widget</p> <p>Pivoting to Discoverability Create our own marketplace Arcboost did the marketplace for development mode Obviously cross-platform Better Marketing techniques, UI \u201cShare\u201d feature</p> <p>Research Organization + Summarization Browser Extension</p> <p>Questions: How does Arc market its browser extensions? ProductHunt but for browser extensions?</p> <p>What would a better marketplace look like: \u201cTrial mode\u201d demo before  \u201cShare\u201d feature Better recommendation algorithm (how can we assume we will build something better than GOOGLE\u2019s recommendation)</p> <p>Why don\u2019t people download browser extensions: They don\u2019t know that they have a problem They don\u2019t know that a solution exists to it Also, they don\u2019t trust it. This is something that can see everything they\u2019re doing.</p> <pre><code>What if there was a way to identify a problem a user is having and suggest a browser extension for it?\n</code></pre> <p>Redefining a browser Maybe every extension is just automatically downloaded and it is a part of the browser\u2019s functionality and you use it</p> <p>Things we can utilize: Chrome APIs track all of your internet behavior</p> <p>Concerns:</p> <p>Links: https://www.browse.ai/how-it-works  Very cool idea for a browser extension; automatically repeats a data-collection process by watching it once https://www.alicjasuska.com/product-design/browser-extension  Highlights a lot of current issues around discoverability https://github.com/cs210/SlingShot/wiki/ What the other team is doing about research collection + AI-powered something</p> <p>Scientific researchers Having multiple sources up at once</p> <p>Web Develoeprs Inosect element easily accessible</p> <p>Mini-feature ideas: Keyboard for bookmarks Launching </p> <p>Browser for a specific community: Old people Students work</p> <p>Backup plan:     We build AI powered browser whatever the fuck that means and then redesign the extension experience to save face.</p> <p>FINAL: Inspo from: https://partytown.builder.io/ Inspo from: https://cohere.ai Library of use-cases (we want to ship an SDK of use cases) Adding AI context menu functionality Content page extraction (imagine scribe or some other shit where it wants to get data from the page you\u2019re own) That\u2019s crazy I wonder where I got the screenshot below from; guess there\u2019s no way to know.</p> <p>Scraping Scrape_data: Scraping data from current web page Scrape_summarize_data Extract_user_profile (With a security focus!) Injecting Injecting_ui Injecting_code Suggesting Adding_ai_context Autocomplete personalized_suggestions</p> <p>Examples: Login/authenticate Get page stats AI written content detection? DOM tree sanitization -&gt; prevent prompt injection Text summarization Autocomplete suggestions but better These are the APIs we can use https://developer.chrome.com/docs/extensions/reference/ We know what AI can do GPT</p> <p>Formula</p> <p>Browser API + AI = ~Modularized Method~</p> <p>browsingData + recommendation = What site to go to next</p> <p>How it works: Const xTen = </p> <p>Overview:  Create a plugin system: Design your package with a plugin system that allows developers to easily integrate their preferred AI APIs. This can be achieved by defining a clear interface that plugins must implement to work with your package. Define the API interface: Clearly specify the methods and properties that AI plugins should expose. This will ensure a consistent integration experience for developers regardless of which AI API they use. For example, you might define methods for text analysis, image recognition, and machine learning tasks. Provide documentation and samples: Create comprehensive documentation on how to develop plugins for your package. Provide sample code for common AI APIs to guide developers in creating their own plugins. Encourage the developer community to contribute plugins for various AI APIs, expanding the package's compatibility. Build core features with plugin support: Develop the core features of your package (e.g., scraping, injecting code, and personalized suggestions) in a way that leverages the plugin system. This will allow developers to seamlessly integrate their AI API of choice while using your package's functionality. Ensure compatibility: While implementing the core features, make sure that they work well with different AI APIs by testing them with a variety of plugins. This will help you identify and address any compatibility issues. Encourage collaboration and contributions: Foster a community around your package that encourages developers to share their plugins, suggest improvements, and report any issues they encounter. This will help your package grow and improve over time.</p>"},{"location":"functions/summarize/","title":"Types","text":"<p>scrape_summarize_data(): Scrape user-specified data from the page extract_user_profile(): Scrape a standard list of info from every page visited</p>"}]}